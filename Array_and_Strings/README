- I practiced solving problems with arrays.
- I noticed some problems working with **2DArrays**, more specifically while traversing the diagonals.
- **Two pointers** is a powerful technique that solves problems by using two indices moving through a data structure concurrently, often reducing nested loops to linear time. It's particularly effective for array and string problems—such as pair-sum, container with most water, or palindrome checking—where you need to compare or combine elements from different ends.

- If you're tracking a streak/sequence, always check if it need a final update after the loop. -> A common pattern is to update the result inside the loop when a break occurs (like a 0) and once more at the end to handle the last streak. []

- In next permutation problems, it might be important  to see the decreasing order represents the last permution like "4,3,1" and increasing order represents the initial permutation like "1,3,4".

- You can apply binary seach in a sorted array that had its elements rotated. Like, [4,5,6,7,8,9,10,2,3]. Observe that one half of the array is always going to be sorted, while the other half will no.

- [Majority Element](https://github.com/octopus-me/Programming_Challenges/blob/main/Array_and_Strings/Majority_Element.cpp): Whenever we find the problem of defining the mojority element of a vetor, [Moore's Voting Algorithm](https://www.geeksforgeeks.org/boyer-moore-majority-voting-algorithm/) might come in handy. It basically observes that the majority elemement of a vetor appears more than half in a vector, so for every candidate count plus 1 or minus 1 in case current element is equal or different from the candidade. With only one iteration (O(n)) we find the majority element. 